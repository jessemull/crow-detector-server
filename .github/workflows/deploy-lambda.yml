name: Deploy Lambda

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Choose environment (dev/production)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

jobs:
  deploy-lambda:
    name: Deploy S3 Event Lambda
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: lambda/package-lock.json

      - name: Install Lambda Dependencies
        working-directory: ./lambda
        run: npm ci

      - name: Lint Lambda Code
        working-directory: ./lambda
        run: npm run lint

      - name: Run Lambda Unit Tests
        working-directory: ./lambda
        run: npm test

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: lambda-coverage-report
          path: lambda/coverage
          retention-days: 7

      - name: Coverage Threshold Check
        working-directory: ./lambda
        run: |
          if [[ $(grep "Statements" coverage/lcov-report/index.html | awk '{print $4}' | tr -d '%') -lt 80 ]]; then
            echo "Code coverage is below threshold. Please update test coverage and try again."
            exit 1
          fi

      - name: Set Up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Build Lambda Package
        working-directory: ./lambda
        run: |
          export NODE_ENV="${{ github.event.inputs.environment }}"
          npm run build
          npm run package
        env:
          API_BASE_URL: ${{ inputs.environment == 'dev' && 'https://api-dev.crittercanteen.com' || 'https://api.crittercanteen.com' }}
          API_ENDPOINT: "/detection/crow-detected-event"

      - name: Generate Artifact Name
        working-directory: ./lambda
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          VERSION=$(jq -r .version < package.json)
          TIMESTAMP=$(date -u +"%Y%m%dT%H%M%SZ")
          ARTIFACT_NAME="crow-detector-s3-lambda-${VERSION}-${COMMIT_HASH}-${TIMESTAMP}.zip"
          echo "Artifact: $ARTIFACT_NAME"
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV

      - name: Upload Lambda to S3
        run: |
          S3_BUCKET="crow-detector-lambda-${{ github.event.inputs.environment }}"
          aws s3 cp "lambda/dist/crow-detector-s3-lambda.zip" s3://${S3_BUCKET}/crow-detector-s3-lambda/${ARTIFACT_NAME}

      - name: Check Change Set Update/Create 
        id: change_set_type
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          STACK_NAME="crow-detector-s3-lambda-stack-${{ github.event.inputs.environment }}"
          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region us-west-2 >/dev/null 2>&1; then
            echo "Updating change set..."
            echo "change_set_type=UPDATE" >> $GITHUB_ENV
          else
            echo "Creating change set..."
            echo "change_set_type=CREATE" >> $GITHUB_ENV
          fi

      - name: Check Stack Status
        id: stack_status
        if: env.change_set_type == 'UPDATE'
        run: |
          STACK_NAME="crow-detector-s3-lambda-stack-${{ github.event.inputs.environment }}"
          STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "NOT_FOUND")
          echo "Status: $STATUS"
          FAILED_STATES=("CREATE_FAILED" "ROLLBACK_FAILED" "UPDATE_FAILED" "DELETE_FAILED" "UPDATE_ROLLBACK_FAILED" "UPDATE_ROLLBACK_COMPLETE" "ROLLBACK_COMPLETE")
          if [[ " ${FAILED_STATES[@]} " =~ " ${STATUS} " ]]; then
            echo "Stack is in a failed state. Manual intervention required."
            exit 1
          fi

      - name: Create Change Set
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          STACK_NAME="crow-detector-s3-lambda-stack-${{ github.event.inputs.environment }}"
          TEMPLATE_URL="s3://crow-detector-lambda-${{ github.event.inputs.environment }}/cloudformation/crow-detector-s3-lambda.yaml"
          
          if [ "${{ env.change_set_type }}" = "CREATE" ]; then
            aws cloudformation create-stack \
              --stack-name "$STACK_NAME" \
              --template-url "$TEMPLATE_URL" \
              --parameters ParameterKey=Environment,ParameterValue="$ENVIRONMENT" ParameterKey=S3Key,ParameterValue="crow-detector-s3-lambda/${ARTIFACT_NAME}" \
              --capabilities CAPABILITY_NAMED_IAM \
              --region us-west-2
          else
            aws cloudformation create-change-set \
              --stack-name "$STACK_NAME" \
              --change-set-name "update-$(date +%s)" \
              --template-url "$TEMPLATE_URL" \
              --parameters ParameterKey=Environment,ParameterValue="$ENVIRONMENT" ParameterKey=S3Key,ParameterValue="crow-detector-s3-lambda/${ARTIFACT_NAME}" \
              --capabilities CAPABILITY_NAMED_IAM \
              --region us-west-2
          fi

      - name: Wait for Change Set Creation
        if: env.change_set_type == 'UPDATE'
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          STACK_NAME="crow-detector-s3-lambda-stack-${{ github.event.inputs.environment }}"
          CHANGE_SET_NAME=$(aws cloudformation list-change-sets --stack-name "$STACK_NAME" --query "Summaries[-1].ChangeSetName" --output text --region us-west-2)
          
          echo "Waiting for change set: $CHANGE_SET_NAME"
          aws cloudformation wait change-set-create-complete \
            --stack-name "$STACK_NAME" \
            --change-set-name "$CHANGE_SET_NAME" \
            --region us-west-2

      - name: Execute Change Set
        if: env.change_set_type == 'UPDATE'
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          STACK_NAME="crow-detector-s3-lambda-stack-${{ github.event.inputs.environment }}"
          CHANGE_SET_NAME=$(aws cloudformation list-change-sets --stack-name "$STACK_NAME" --query "Summaries[-1].ChangeSetName" --output text --region us-west-2)
          
          echo "Executing change set: $CHANGE_SET_NAME"
          aws cloudformation execute-change-set \
            --stack-name "$STACK_NAME" \
            --change-set-name "$CHANGE_SET_NAME" \
            --region us-west-2

      - name: Wait for Stack Update
        if: env.change_set_type == 'UPDATE'
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          STACK_NAME="crow-detector-s3-lambda-stack-${{ github.event.inputs.environment }}"
          
          echo "Waiting for stack update to complete..."
          aws cloudformation wait stack-update-complete \
            --stack-name "$STACK_NAME" \
            --region us-west-2

      - name: Wait for Stack Creation
        if: env.change_set_type == 'CREATE'
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          STACK_NAME="crow-detector-s3-lambda-stack-${{ github.event.inputs.environment }}"
          
          echo "Waiting for stack creation to complete..."
          aws cloudformation wait stack-create-complete \
            --stack-name "$STACK_NAME" \
            --region us-west-2

      - name: Get Stack Outputs
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          STACK_NAME="crow-detector-s3-lambda-stack-${{ github.event.inputs.environment }}"
          
          echo "Stack outputs:"
          aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --query "Stacks[0].Outputs" \
            --output table \
            --region us-west-2

      - name: Deployment Summary
        run: |
          echo "âœ… Lambda deployment completed successfully!"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Artifact: ${{ env.ARTIFACT_NAME }}"
          echo "Stack: crow-detector-s3-lambda-stack-${{ github.event.inputs.environment }}"
